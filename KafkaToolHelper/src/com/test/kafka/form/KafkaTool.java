/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.test.kafka.form;

import com.test.kafka.bo.ConsumerInfo;
import com.test.kafka.bo.TopicInfo;
import com.test.kafka.util.AESEncryptor;
import com.test.kafka.util.KafkaHelper;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.apache.kafka.clients.admin.ConsumerGroupListing;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author PGPS
 */
public class KafkaTool extends javax.swing.JFrame {
    private final static Logger LOGGER = Logger.getLogger(KafkaTool.class.getName());
    private Task task;
    private Task2 task2;
    private String encPassword = "OPWAKjc1XobU+sL4MEZ8fg==";

    KafkaHelper kafkaHelper;
    /**
     * Creates new form KafkaTool
     */
    public KafkaTool() {
        initComponents();
        setTitle("KafkaTool");
        kafkaHelper = new KafkaHelper();

        jTable1.setAutoCreateRowSorter(true);
        message.setText("Enter the message to be sent..");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        consumerList = new javax.swing.JComboBox<>();
        topicList = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        bootStrapText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        topicList1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        bootStrapText1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        partition = new javax.swing.JTextField();
        offset = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        message = new javax.swing.JTextArea();
        jButton10 = new javax.swing.JButton();
        key = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("KafkaTool"); // NOI18N
        setResizable(false);

        jTextField1.setEditable(false);
        jTextField1.setText("Â© PG - 2020");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jInternalFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame1.setTitle("Details");
        jInternalFrame1.setToolTipText("Kafka Details");
        jInternalFrame1.setName("Details"); // NOI18N
        try {
            jInternalFrame1.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        jInternalFrame1.setVisible(true);

        consumerList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Consumer" }));

        topicList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Topic" }));

        jLabel1.setText("Bootstrap Server");

        jButton2.setText("Get LAG");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonMousePressed(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        bootStrapText.setText("localhost:2181");
        bootStrapText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootStrapTextActionPerformed(evt);
            }
        });

        jLabel3.setText("Topics");

        jButton3.setText("Get ISR");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonMousePressed(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Consumers");

        jButton1.setText("Fetch");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonMousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("FindAll LAG");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonMousePressed(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("FindAll ISR");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonMousePressed(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(bootStrapText, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(consumerList, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(23, 23, 23)
                                .addComponent(jButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(30, 30, 30)
                                .addComponent(jButton5))
                            .addComponent(topicList, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bootStrapText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topicList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        jTextField2.setEditable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jInternalFrame1)
                    .addComponent(jScrollPane2))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(202, 202, 202))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jInternalFrame2.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame2.setTitle("Admin");
        jInternalFrame2.setToolTipText("Kafka Admin");
        jInternalFrame2.setVisible(true);

        topicList1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Topic" }));

        jLabel4.setText("Bootstrap Server");

        bootStrapText1.setText("localhost:2181");
        bootStrapText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootStrapText1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Topics");

        jButton8.setText("Fetch");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton8jButtonMousePressed(evt);
            }
        });
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        partition.setText("partition");

        offset.setText("offset");
        offset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offsetActionPerformed(evt);
            }
        });

        jButton9.setText("Delete");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton9jButtonMousePressed(evt);
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        message.setColumns(20);
        message.setRows(5);
        jScrollPane1.setViewportView(message);

        jButton10.setText("Send");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton10jButtonMousePressed(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        key.setText("Key...");

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(bootStrapText1))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(topicList1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(partition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(offset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton8)))
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(bootStrapText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addGap(17, 17, 17)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicList1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(partition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton10)))
                .addContainerGap(159, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(484, 484, 484))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("KafkaTool");
        getAccessibleContext().setAccessibleDescription("KafkaTool");

        pack();
    }// </editor-fold>

    private void bootStrapTextActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        LOGGER.log(Level.INFO, "Inside button action : {0}", evt.getActionCommand());

        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText.getText());
        props.put("retries", 5);

        topicList.removeAllItems();
        consumerList.removeAllItems();

        Collection<ConsumerGroupListing> consumersList = kafkaHelper.showConsumers(props);
        List<String> consList = new ArrayList<String>();
        consumersList.stream().forEach((cgl) -> {
            LOGGER.log(Level.INFO, "Addming Consumer : {0}", cgl.groupId());
            consList.add(cgl.groupId());
            //consumerList.addItem(cgl.groupId());
        });
        Collections.sort(consList);
        consList.stream().forEach((cnsmr) -> {
            consumerList.addItem(cnsmr);
        });

        List<String> topicsList = kafkaHelper.showTopics(props);
        Collections.sort(topicsList);

        topicsList.stream().forEach((topic) -> {
            LOGGER.log(Level.INFO, "Addming Topics : {0}", topic);
            topicList.addItem(topic);
        });

        task2 = new Task2();
        task2.start();
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {

        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(KafkaTool.class.getName()).log(Level.SEVERE, null, ex);
        }

        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText.getText());
        props.put("retries", 5);
        System.out.println("consumerList.getSelectedItem().toString() "+consumerList.getSelectedItem().toString());
        List<ConsumerInfo> consumerInfoList = kafkaHelper.getLag(consumerList.getSelectedItem().toString(), props);

        String header[] = new String[] { "Topic Partition", "Committed Offset", "Final Offset",
            "Lag Count", "Status" };

        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);
        consumerInfoList.stream().forEach((consumerInfo) -> {
            dtm.addRow(new Object[] { consumerInfo.getTopicPartition(), consumerInfo.getCommittedOffset(), consumerInfo.getFinalOffset(),
                consumerInfo.getLag(), consumerInfo.getStatus() });
        });

        task2 = new Task2();
        task2.start();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {

        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText.getText());
        props.put("retries", 5);
        System.out.println("consumerList.getSelectedItem().toString() "+topicList.getSelectedItem().toString());

        ImageIcon loading = new ImageIcon("loadder.gif");
        jScrollPane2.add(new JLabel("loading... ", loading, JLabel.CENTER));

        List<TopicInfo> topicInfoDetails = kafkaHelper.getTopicInfo(topicList.getSelectedItem().toString(), props);

        String header[] = new String[] { "Topic Partition", "ISR Count", "Replica Count",
            "Leader Host" };

        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);

        topicInfoDetails.stream().forEach((topicInfo) -> {
            dtm.addRow(new Object[] { topicInfo.getTopicPartition(), topicInfo.getIsrCount(), topicInfo.getReplicaCount(),
                topicInfo.getLeaderHost() });
        });

        task2 = new Task2();
        task2.start();
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {

        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText.getText());
        props.put("retries", 5);

        System.out.println("consumerList.getSelectedItem().toString() "+consumerList.getSelectedItem().toString());
        List<ConsumerInfo> consumerInfoList = kafkaHelper.findAllLag(props);
        String header[] = new String[] {"Consumer GroupId", "Topic Partition", "Committed Offset", "Final Offset",
            "Lag Count", "Status" };

        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);
        consumerInfoList.stream().forEach((consumerInfo) -> {
            dtm.addRow(new Object[] {consumerInfo.getConsumerGroupId(), consumerInfo.getTopicPartition(), consumerInfo.getCommittedOffset(), consumerInfo.getFinalOffset(),
                consumerInfo.getLag(), consumerInfo.getStatus() });
        });

        task2 = new Task2();
        task2.start();
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText.getText());
        props.put("retries", 5);

        ImageIcon loading = new ImageIcon("loadder.gif");
        jScrollPane2.add(new JLabel("loading... ", loading, JLabel.CENTER));

        List<TopicInfo> topicInfoDetails = kafkaHelper.getAllTopicInfo(props);

        String header[] = new String[] { "Topic Partition", "ISR Count", "Replica Count",
            "Leader Host", "Status" };

        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);

        topicInfoDetails.stream().forEach((topicInfo) -> {
            dtm.addRow(new Object[] { topicInfo.getTopicPartition(), topicInfo.getIsrCount(), topicInfo.getReplicaCount(),
                topicInfo.getLeaderHost(), topicInfo.getStatus() });
        });

        task2 = new Task2();
        task2.start();
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButtonMousePressed(java.awt.event.MouseEvent evt) {
        task = new Task();
        task.start();
    }

    private void bootStrapText1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton8jButtonMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {
        LOGGER.log(Level.INFO, "Inside button action : {0}", evt.getActionCommand());

        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText1.getText());
        props.put("retries", 5);

        topicList1.removeAllItems();

        List<String> topicsList = kafkaHelper.showTopics(props);
        Collections.sort(topicsList);

        topicsList.stream().forEach((topic) -> {
            LOGGER.log(Level.INFO, "Addming Topics : {0}", topic);
            topicList1.addItem(topic);
        });

    }

    private void offsetActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton9jButtonMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {
        AESEncryptor aESEncryptor = new AESEncryptor();
        Object[] options = {"Yes, please",
                    "No, thanks"};

        String password = JOptionPane.showInputDialog("Enter Password");
        String encPwd = aESEncryptor.encrypt(password);

        if(!encPwd.equalsIgnoreCase(encPassword)){
            JOptionPane.showMessageDialog(this,
                    "Invalid Password",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            int n = JOptionPane.showOptionDialog(this,
                "This will delete all messages till the selected offset. Are you OK to proceed",
                "Confirm Deletion",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);

            if(n == 0){
                Map<String, Object> props;
                props = new HashMap<>();
                props.put("bootstrap.servers", bootStrapText1.getText());
                props.put("retries", 5);

                boolean result = kafkaHelper.deleteMessages(props, topicList1.getSelectedItem().toString(), partition.getText(), offset.getText());
                if(result){
                    JOptionPane.showMessageDialog(this,
                    "Message deleted successfully",
                    "Info",
                    JOptionPane.INFORMATION_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(this,
                    "Error in Message deletion - Try again",
                    "Info",
                    JOptionPane.INFORMATION_MESSAGE);
                }

            }else{
                JOptionPane.showMessageDialog(this,
                    "Not deleting messages",
                    "Info",
                    JOptionPane.INFORMATION_MESSAGE);
            }
        }





    }

    private void jButton10jButtonMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {
        Map<String, Object> props;
        props = new HashMap<>();
        props.put("bootstrap.servers", bootStrapText1.getText());

        if(topicList1.getSelectedIndex() <0 || StringUtils.isBlank(message.getText())
                || StringUtils.isBlank(key.getText())){
            JOptionPane.showMessageDialog(this,
                "Topic, Message and Key required",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }else{
            boolean result = kafkaHelper.sendMessages(props, topicList1.getSelectedItem().toString(), message.getText(), key.getText());

            if(result){
                    JOptionPane.showMessageDialog(this,
                    "Message Posted successfully on topic "+topicList1.getSelectedItem().toString(),
                    "Info",
                    JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(this,
                "Error in sending message - Try again",
                "Info",
                JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KafkaTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KafkaTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KafkaTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KafkaTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KafkaTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField bootStrapText;
    private javax.swing.JTextField bootStrapText1;
    private javax.swing.JComboBox<String> consumerList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField key;
    private javax.swing.JTextArea message;
    private javax.swing.JTextField offset;
    private javax.swing.JTextField partition;
    private javax.swing.JComboBox<String> topicList;
    private javax.swing.JComboBox<String> topicList1;
    // End of variables declaration


    private class Task extends Thread {
      public Task(){
      }
      public void run(){
            jTextField2.setText("Loading data...");
            SwingUtilities.invokeLater(new Runnable() {
               public void run() {
                  jTextField2.setText("Loading data...");
               }
            });
      }
   }

    private class Task2 extends Thread {
      public Task2(){
      }
      public void run(){
            jTextField2.setText("Completed Load data...");
            SwingUtilities.invokeLater(new Runnable() {
               public void run() {
                  jTextField2.setText("Completed Load data...");
               }
            });
      }
   }

}
